Angular - Framework Web, Mobile e Desktop.

AngularJS x Angular (Diferentes)

Por que Angular?
Rápido, moderno, simplificado, produtivo.

Angular é baseado em componentes. A aplicação é a coleção de componentes (Consome API Rest através de services).
Um componente tem template que está junto com a classe que possui propriedades e métodos com seus metadados.

TypeScript - Conjunto SuperSet de JavaScript. Fortemente tipado. Ferramental rico na IDE. Precisa transpilar (na hora de compilar, gera um JavaScript). Desenvolvido pela Microsoft, criada pelo pai do C# e .NET, open source, baseado em orientação a objetos. 

Requisitos: (REQUERIDO) HTML, CSS, JS. (DESEJÁVEL) Orientação a objetos, C# ou Java. (NÃO REQUERIDO) Angular 1.X, TypeScript.

Setup do ambiente: NodeJS, NPM (Já vem com Node). Instalação do Angular CLI - npm install -g @angular/cli. 

Os arquivos spec são para teste, logo podemos deletá-los.

Components: 
Primeira linha é importada a diretiva que é um componente do framework próprio do angular.
O que vai dizer que é um componente é o @component. O selector é o nome como você irá invocar esse componente. Logo após temos o caminho do template(html) e o caminho do estilo(css).
A exportação da classe usando typscript e o título que é uma variável.
Para criar um componente: ng generate component pasta/NomeComponente
ou ng g c NomeComponente (abreviados)

Decorators:
Um decorator define o comportamento de uma classe do Angular.
Para criar - ng g module NomeModulo

Service:
Na declaração é injectable (injetável). Providedin: 'root' é provisionado na raiz, serviço da raiz. Declaração da classe e construtor.
Esse serviço precisa ser registrado no módulo, pega o nome e coloca dentro de providers no module.ts, fazer também a importação da pasta.
Para gerar: ng g service Servico

------------------- Criando a aplicação ---------------------

ng new --minimal -g MeuProjeto (usando minimal para criar o projeto mais básico, sem os documentos de teste. E -g pra não criar o repositório do Git).

------------------- Framework de Front-End ---------------------

Bootstrap x Angular Material.
Iremos utilizar o bootstrap para a aplicação.
Bootstrap usa JavaScript com JQuery, não podemos misturar jQuery com Angular.
NGX-Bootstrap encapsula essa parte jQuery para Angular. (Mas não é necessário, só se for usar algum recurso que seja dependente de JS)

------------------- Dando uma cara a aplicação ---------------------

O index.html é só a estrutura.
Vamos remover o template do arquivo por templateUrl;
Adicionado conteúdo HTML estilizado com Bootstrap.

------------------- Definindo os componentes ---------------------

Criando o componente com ng g c navegacao/menu.
Criando o componente com ng g c navegacao/home.
Criando o componente com ng g c navegacao/footer.
Removendo a implementação OnInit pois não vamos utilizar programação nesses componentes.
Colocando os devidos conteúdos em cada um dos html dos componentes.
Criamos a pasta de navegação com os componentes (inicial, rodapé e menu). O app.component.html possui apenas o que ele precisa exibir.

------------------- Roteamento no Angular ---------------------

Criando a pasta institucional e os componentes sobre e contato
ng g c institucional/sobre
ng g c institucional/contato
Criando arquivo de rotas: app.routes.ts
Adicionando as rotas no arquivo, e depois configurando no módulo principal (app.module.ts). Importar o RouterModule e o APP_BASE_HREF pra informar que o link base é o /.
No app.component.html removemos o <app-home> e vamos utilizar a diretiva de navegação <router-outlet>.
No menu.component.html removi os href para usar a diretiva [routerLink].

------------------- Tipos de DataBind ---------------------

Forma de exibir dados.
Interpolation: Forma mais fácil de exibir um dado. É representado no template por dois pares de chaves, exemplo: <label>Nome: {{meuDado}} </label>.
Property Binding: Define valor de uma propriedade do elemento HTML, exemplo: <img [src]="minhaUrl> (é a mesma coisa de fazer: <img src="{{minhaUrl}}">). É um conceito de One-way binding por que o valor da variável vem do componente até a property mas não faz o caminho contrário.
Event Binding: Realiza a chamada de um método com base no evento do elemento HTML, exemplo: <button (click)='clickContador()'>Clique-me</button>. É muito utilizado para a submissão de formulários ou qualquer necessidade de processamento no componente com base em eventos conhecidos dos elementos HTML.
Two-way Binding: Exibe e atualiza um dado nas duas direções (template, componente), exemplo: 
<input class="form-control" type="text" [(ngModel)]="evento.nome" />
<label>Nome do evento: {{evento.nome}} </label>
É a união de property binding com event binding.

------------------- DataBind na prática ---------------------

Criei um novo componente: ng g c demos/DataBinding
Executei exemplos de interpolation, passando o valor entre {}. Exemplo de property binding passando o parâmetro entre [] pro Angular tomar de conta. Exemplo de event binding colocando o evento entre () para executar a função. Exemplo de two-way binding, primeiro comentando um código que simula esse resultado, e logo após usando de forma correta.
O ngModel é o modelo. Toda vez que esse modelo for alterado então o nome vai receber o evento e depende de um módulo que não tinhamos importado. Para ele funcionar importamos no modulo o FormsModule no arquivo module.ts.


------------------- Fake back-end ---------------------

Primeiro instalei o pacote json.server utilizando o comando npm i json-server(roda em qualquer lugar).
Criado arquivo produtos.json, com uma lista de produtos. 
Rodando o comando json-server --watch nomeJson na pasta do projeto.

